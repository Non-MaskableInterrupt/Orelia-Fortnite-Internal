
namespace exploits {
	class c_weapon {
	public:
		void apply( engine::a_fort_weapon* weapon ) {
			apply_rapid_fire( weapon );
			apply_hit_sound( weapon );
		}

		void apply_rapid_fire( engine::a_fort_weapon* weapon ) {
			if ( !features::exploits::rapid_fire ) return;
			auto ramping_fire_rate_data = weapon->ramping_fire_rate_data( );
			ramping_fire_rate_data.m_b_is_ramping_weapon = true;
			ramping_fire_rate_data.m_max_ramp_stacks.m_value = 1;
			ramping_fire_rate_data.m_ramp_grace_duration.m_value = 1;
			ramping_fire_rate_data.m_ramp_fire_rate_to_add.m_value = features::exploits::fire_speed;
		}

		void apply_hit_sound( engine::a_fort_weapon* weapon ) {
			if ( !features::exploits::hit_sound ) return;

			static const std::vector<const wchar_t*> hit_sounds = {
				L"/Game/Sounds/Fort_Weapons/Grenades/FireJar/Molotov_Explosion_02",
				L"/Game/Sounds/Foley_Loot/Containers/Treasure_Chest/Tiered_Chest_Rare_Ambient_Loop_Cue",
				L"/Game/Athena/Sounds/Items/Item_Consumables_Shield_Potion_Mini_Use",
				L"/Game/Athena/Sounds/Shield/SFX_SafeZone_BeginShrinking_Quad",
				L"/Game/Sounds/Fort_UI_Sounds/Bus/Battle_Bus_Last_Stop_Cue",
				L"/Game/Sounds/Fort_UI_Sounds/Gameplay/InGame_POI_Discovered_02_Magical"
			};

			auto sound = engine::u_object::find_object<engine::u_sound_base*>( 
				hit_sounds[ features::exploits::hit_sounds ]
			);
			if ( !sound ) return;

			weapon->primary_fire_sound_1p( sound );
			weapon->primary_fire_stop_sound_1p( sound );

			//for ( int i = 0; i < 23; i++ )
			//	weapon->impact_physical_surface_sounds( sound, i );
			//for ( int i = 0; i < 3; i++ )
			//	weapon->primary_fire_sound( sound, i );
			//for ( int i = 0; i < 3; i++ )
			//	weapon->primary_fire_stop_sound( sound, i );
			//for ( int i = 0; i < 3; i++ )
			//	weapon->secondary_fire_sound( sound, i );
			//for ( int i = 0; i < 3; i++ )
			//	weapon->secondary_fire_stop_sound( sound, i );
			//for ( int i = 0; i < 3; i++ )
			//	weapon->charge_fire_sound_1p( sound, i );
			//for ( int i = 0; i < 3; i++ )
			//	weapon->charge_fire_sound( sound, i );
		}

	private:
		engine::a_fort_weapon* m_weapon;
	};
}